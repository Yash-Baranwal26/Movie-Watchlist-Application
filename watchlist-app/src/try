import './App.css';
import { IoIosAddCircle } from "react-icons/io";
import { IoBookmark, IoCheckmarkCircleSharp } from "react-icons/io5";
import { FaTrashAlt } from "react-icons/fa";
import Header from './Header';
import { Link } from 'react-router-dom';
import { useEffect, useState } from 'react';
import axios from 'axios';

function App() {
  const [product, setProduct] = useState([]);
  const [clicked, setClicked] = useState(() => {
    const savedClickedState = JSON.parse(localStorage.getItem('clickedState')) || {};
    return savedClickedState;
  });
  const [delClicked, setDelClicked] = useState({});

  useEffect(() => {
    axios.get("http://localhost:1234/fetchMovie")
      .then(res => {
        console.log(res.data)
        setProduct(res.data);
      }).catch(err => {
        console.log(err);
      });
  }, []);

  const deleteCard = async () => {
    try {
      const toDelete = Object.keys(delClicked).filter(index => delClicked[index]);
      if (toDelete.length === 0) {
        alert("No movies selected for deletion.");
        return;
      }

      // Confirmation before deletion
      const confirmed = window.confirm(`Are you sure you want to delete ${toDelete.length} selected movie(s)?`);
      if (!confirmed) {
        return;
      }

      const promises = toDelete.map(index => {
        return axios.delete(`http://localhost:1234/deleteMovie/${product[index]._id}`);
      });

      await Promise.all(promises);
      alert("Selected movies deleted successfully.");

      // Refresh the movie list after deletion
      const updatedMovies = await axios.get("http://localhost:1234/fetchMovie");
      setProduct(updatedMovies.data);

      // Clear the delete markers
      setDelClicked({});
    } catch (error) {
      console.error("Error deleting movies:", error);
      alert("Failed to delete selected movies.");
    }
  };

  useEffect(() => {
    localStorage.setItem('clickedState', JSON.stringify(clicked));
  }, [clicked]);

  const toggleBookmark = (index) => {
    setClicked(prevClicked => ({
      ...prevClicked,
      [index]: !prevClicked[index]
    }));
  };

  const toggleDelBtn = (index) => {
    setDelClicked(prevClicked => ({
      ...prevClicked,
      [index]: !prevClicked[index]
    }));
  };

  return (
    <div className="min-h-screen bg-black">
      <Header />

      <div className='flex flex-col items-end pr-8 pt-4'>
        <Link to='/addMovie'><IoIosAddCircle className='text-white text-3xl mb-5' /></Link>
        <FaTrashAlt className='text-white text-3xl cursor-pointer' onClick={deleteCard} />
      </div>

      <div className="flex flex-wrap">
        {product.map((movieList, index) => (
          <div key={index} className="w-full md:w-1/2 lg:w-1/3 xl:w-1/4 p-4">
            <div className="bg-gray-800 text-white border border-red-500 rounded-lg shadow-lg">
              <div className='flex justify-between items-center px-4 pt-2'>
                <IoBookmark
                  className={`text-2xl cursor-pointer ${clicked[index] ? 'text-black' : 'text-gray-200'}`}
                  onClick={() => toggleBookmark(index)}
                />
                <IoCheckmarkCircleSharp
                  className={`text-2xl cursor-pointer ${delClicked[index] ? 'text-red-500' : 'text-gray-200'}`}
                  onClick={() => toggleDelBtn(index)}
                />
              </div>
              <Link to={`/movieDetail/${movieList._id}`}>
                <img
                  className="w-full h-48 object-cover rounded-t-lg"
                  src={`http://localhost:1234/attach/${movieList.movImg}`}
                  alt="Movie"
                />
              </Link>
              <div className="p-4">
                <h4 className="text-xl font-bold">
                  {movieList.title}
                </h4>
                <p className="mt-2">
                  {movieList.description}
                </p>
                <hr className="my-4" />
                <div className="flex justify-between">
                  <div>Release: {movieList.reYear}</div>
                  <div className="text-right text-red-500">
                    {/* <h5>&#8377; {movieList.price}</h5> */}
                  </div>
                </div>
              </div>
            </div>
          </div>
        ))}
      </div>
    </div>
  );
}

export default App;

// import React, { useState, useEffect } from 'react';
// import axios from 'axios';
// import { useParams } from 'react-router-dom';

// export default function UpdateMovieDetail() {
//   const { id } = useParams(); // Correctly retrieves the id from URL params
//   const [movie, setMovie] = useState({});
//   const [user, setUser] = useState({
//     title: '',
//     description: '',
//     reYear: '',
//     gnre: ''
//   });
//   const [attachment, setAttachment] = useState();
//   const [gnre, setGnre] = useState([]);
//   const [showGnre, setShowGnre] = useState(false);

//   // Define allgnre here
//   const allgnre = [
//     "Action",
//     "Comedy",
//     "Drama",
//     "Horror",
//     "Science Fiction ",
//     "Romance",
//     "Thriller",
//     "Fantasy",
//     "Documentary",
//     "Animated",
//   ];

//   useEffect(() => {
//     axios.get(`http://localhost:1234/fetchMovieData/${id}`)
//       .then(res => {
//         console.log(res.data);
//         setMovie(res.data);
//         setUser({
//           title: res.data.title,
//           description: res.data.description,
//           reYear: res.data.reYear,
//           gnre: res.data.gnre.join(', ') // Assuming gnre is an array of genres
//         });
//         setGnre(res.data.gnre); // Set genres array for checkboxes
//       }).catch(err => {
//         console.log(err);
//       });
//   }, [id]);

//   const inputHandler = (e) => {
//     setUser({ ...user, [e.target.name]: e.target.value });
//   };

//   const handleGnresChange = (e) => {
//     const value = e.target.value;
//     if (gnre.includes(value)) {
//       setGnre(gnre.filter((gnres) => gnres !== value));
//     } else {
//       setGnre([...gnre, value]);
//     }
//   };

//   const toggleGnre = () => {
//     setShowGnre((prevShowGnre) => !prevShowGnre);
//   };

//   const uploadImage = (e) => {
//     setAttachment(e.target.files[0]);
//   };

//   const dataSubmit = (e) => {
//     e.preventDefault();
//     const formData = new FormData();
//     formData.append("title", user.title);
//     formData.append("description", user.description);
//     formData.append("reYear", user.reYear);
//     formData.append("gnre", gnre.join(', '));
//     formData.append("movImg", attachment);

//     axios.put(`http://localhost:1234/updateMovieDetail/${id}`, formData)
//       .then(res => {
//         alert(res.data.msg);
//         setUser({});
//         setAttachment(null);
//         setGnre([]);
//       }).catch(err => {
//         alert(err.response.data.error);
//       });
//   };

//   return (
//     <div>
//       <div className="flex justify-center items-center min-h-screen" style={{ marginTop: "-10vh" }}>
//         <div className="border border-black p-4 rounded-md w-full max-w-md mx-2 bg-gray-200 rounded-md p-4">
//           <h4 className="mb-3 text-2xl md:text-3xl">Update Movie</h4>
//           <form className="flex flex-col items-center " onSubmit={dataSubmit}>
//             <div className="mb-4 w-full">
//               <input
//                 className="form-input w-full rounded-md border border-black px-3 py-1"
//                 type="text"
//                 placeholder="Enter Movie Title"
//                 name="title"
//                 value={user.title}
//                 onChange={inputHandler}
//               />
//             </div>
//             <div className="mb-4 w-full">
//               <textarea
//                 rows={5}
//                 cols={50}
//                 className="form-input w-full rounded-md border border-black px-3 py-1"
//                 placeholder="Description"
//                 name="description"
//                 value={user.description}
//                 onChange={inputHandler}
//               />
//             </div>
//             <div className="mb-4 w-full">
//               <input
//                 className="form-input w-full rounded-md border border-black px-3 py-1"
//                 type="number"
//                 placeholder="Release Year"
//                 name="reYear"
//                 value={user.reYear}
//                 onChange={inputHandler}
//               />
//             </div>

//             <div className="mb-4 w-full relative">
//               <input
//                 className="form-input w-full rounded-md border border-black px-3 py-1"
//                 type="text"
//                 placeholder="Type of Movie"
//                 name="gnre"
//                 value={gnre.join(", ")}
//                 onClick={toggleGnre}
//                 readOnly
//               />
//               {showGnre && (
//                 <div className="absolute top-full left-0 w-full bg-white border border-black rounded-md mt-1 p-2 z-10">
//                   {allgnre.map((gnres) => (
//                     <div key={gnres} className="flex items-center mb-1">
//                       <input
//                         type="checkbox"
//                         id={gnres}
//                         value={gnres}
//                         checked={gnre.includes(gnres)}
//                         onChange={handleGnresChange}
//                       />
//                       <label htmlFor={gnres} className="ml-2">
//                         {gnres}
//                       </label>
//                     </div>
//                   ))}
//                 </div>
//               )}
//             </div>

//             <div className="mb-4 w-full">
//               <label className="block mb-2">Movie Image</label>
//               <input
//                 className="form-input w-full rounded-md border border-black px-3 py-1 bg-white"
//                 type="file"
//                 name="movImg"
//                 onChange={uploadImage}
//               />
//             </div>

//             <div className="flex justify-center items-center mb-4">
//               <button className="bg-red-300 border border-black py-2 px-4 text-lg rounded-2xl">
//                 Update
//               </button>
//             </div>
//           </form>
//         </div>
//       </div>
//     </div>
//   );
// }
